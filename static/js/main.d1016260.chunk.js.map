{"version":3,"sources":["components/header/logo/Logo.tsx","components/header/searchbar/Searchbar.tsx","components/header/Header.tsx","components/posts/post/info/Info.tsx","components/posts/post/Post.tsx","components/posts/Posts.tsx","App.tsx","serviceWorker.ts","index.tsx","components/header/logo/logo.gif"],"names":["Logo","className","src","logo","alt","Searchbar","submitFunction","useState","typed","updateTyped","htmlFor","onSubmit","event","preventDefault","id","placeholder","onChange","target","value","Header","Info","user","flairs","comments","upvotes","length","filter","flair","hasOwnProperty","map","u","processFlairs","Post","title","selftext","isSelf","isMedia","isVideo","crossPost","url","thumbnail","isExpanded","toggleExpand","onClick","ExpandLess","ExpandMore","style","display","source","controls","preload","poster","type","loading","href","Posts","posts","post","key","data","is_self","is_reddit_media_domain","is_video","crosspost_parent_list","media","reddit_video","fallback_url","author","author_flair_richtext","num_comments","ups","App","search","setSearch","setPosts","useEffect","a","fetch","res","json","children","newSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d1016260.chunk.js","sourcesContent":["import React from 'react';\nimport './Logo.css';\nimport logo from './logo.gif';\n\nfunction Logo() {\n  return (\n    <div className=\"logo\">\n      <img src={logo} alt=\"yeppers\" />\n    </div>\n  );\n}\n\nexport default Logo;\n","import React, { useState } from 'react';\nimport './Searchbar.css';\n\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst Searchbar = (submitFunction: any) => {\n  const [typed, updateTyped] = useState(\"all\");\n  const handleChange = (event: any) => updateTyped(event.target.value);\n  const handleSubmit = (event: any ) => {\n    event.preventDefault();\n    submitFunction.submitFunction.submitFunction(typed);\n  }\n  return (\n    <div className=\"searchbar\">\n      <label htmlFor=\"searchbar\"><SearchIcon /></label>\n      <form onSubmit={handleSubmit}><input id=\"searchbar\" placeholder={typed} onChange={handleChange}/></form>\n    </div>\n  );\n}\n\nexport default Searchbar;\n","import React from 'react';\nimport './Header.css';\n\nimport Logo from './logo'\nimport Searchbar from './searchbar';\n\nconst Header = (submitFunction: any) => { \n  return (\n    <div className = \"header\">\n      <Logo />\n      <Searchbar submitFunction={submitFunction}/> \n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './Info.css';\n\ntype InfoProps = {\n  user: string,\n  flairs: Array<{a?: string, e: string, u?: string, t?: string}>,\n  comments: number,\n  upvotes: number,\n}\n\nconst Info: React.FC<InfoProps> = ({ user, flairs, comments, upvotes }) => {\n  const processFlairs = () => {\n    if (flairs.length === 0) { return; }\n    return flairs.filter(flair => flair.hasOwnProperty('u')).map(flair => <img src={flair.u} alt={flair.u}/>);\n  }\n  \n  return (\n    <div className=\"info\">\n      <span>Posted by: {user} {processFlairs()}</span>\n      <span>ðŸ •{upvotes}</span>\n      <span>ðŸ’¬{comments}</span>\n    </div>\n  );\n}\n\nexport default Info;\n","import React, { useState } from 'react';\nimport './Post.css';\nimport { ExpandLess, ExpandMore } from '@material-ui/icons/';\nimport ReactMarkdown from 'react-markdown';\nimport Info from './info';\n\ntype PostProps = {\n  title: string,\n  selftext: string,\n  isSelf: boolean,\n  isMedia: boolean,\n  isVideo: boolean,\n  crossPost: any,\n  url: string,\n  thumbnail: string,\n  user: string,\n  flairs: Array<{a?: string, e: string, u?: string, t?: string}>,\n  comments: number,\n  upvotes: number,\n}\n\nconst Post: React.FC<PostProps> = ({ title, selftext, isSelf, isMedia, isVideo, crossPost, url, thumbnail, user, flairs, comments, upvotes }) => {\n  const [isExpanded, toggleExpand] = useState(false);\n  const handleToggleExpand = () => toggleExpand(!isExpanded);\n  const content = () => {\n    if (isSelf) return <ReactMarkdown source={selftext} className=\"markdown\" />\n    if (isMedia) {\n     if (isVideo) return <video controls preload=\"metadata\" poster={thumbnail}><source src={`${url}`} type=\"video/mp4\" /></video>\n     else return <img src={url} alt={title} loading=\"lazy\"/>\n    }\n    if (crossPost) return <ReactMarkdown source={crossPost[0].selftext} />\n    return <a href={url}>{url}</a> \n  };\n\n  return (\n    <div className=\"post\">\n      <div className=\"postHeader\" onClick={handleToggleExpand}>\n        <h2>{title}</h2>\n        <div className=\"expand\">{ isExpanded ? <ExpandLess /> : <ExpandMore /> }</div>\n      </div>\n      <div className=\"expandible\" style={{display: isExpanded ? \"flex\" : \"none\"}}>\n        { content() }\n      </div>\n      <Info user={user} flairs={flairs} comments={comments} upvotes={upvotes} /> \n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport './Posts.css';\n\nimport Post from './post';\n\nconst Posts: React.FC<any> = ({ posts }) => {\n  return (\n    <div className=\"posts\">\n      {\n        posts?.map((post: any) => {\n          return <Post\n            key={post.data.id} \n            title={post.data.title} \n            selftext={post.data.is_self ? post.data.selftext : post.data.url} \n            isSelf={post.data.is_self} \n            isMedia={post.data.is_reddit_media_domain}\n            isVideo={post.data.is_video}\n            crossPost={post.data.crosspost_parent_list}\n            url={post.data.is_video ? post.data.media.reddit_video.fallback_url : post.data.url}\n            thumbnail={post.data.thumbnail}\n            user={post.data.author}\n            flairs={post.data.author_flair_richtext}\n            comments={post.data.num_comments}\n            upvotes={post.data.ups}\n          />\n        })  \n      }\n    </div>\n  );\n}\n\nexport default Posts;\n\n\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Header from './components/header';\nimport Posts from './components/posts';\n\nconst App = () => {\n  const [search, setSearch] = useState(\"all\");\n  const [posts, setPosts] = useState();\n \n  const updatePosts = () => {\n    (async () => {\n      const res = await fetch(`https://www.reddit.com/r/${search}.json`);\n      const data = await res.json();\n      setPosts(data.data.children);\n    })();\n  }\n\n  const searchSubmit = (newSearch: string) => setSearch(newSearch);\n\n  useEffect(updatePosts, [search]);\n\n  return (\n    <div className=\"app\">\n      <Header submitFunction={searchSubmit} />\n      <Posts posts={posts} id=\"posts\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.05cec084.gif\";"],"sourceRoot":""}